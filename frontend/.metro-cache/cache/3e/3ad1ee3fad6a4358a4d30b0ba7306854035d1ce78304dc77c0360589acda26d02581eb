{"dependencies":[{"name":"react-native-web/dist/exports/Linking","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"3Rjz9Of4YombbpmYBhNmyoa9U9Y=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"expo-contacts","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":50},"end":{"line":2,"column":42,"index":92}}],"key":"xdLl7lq8PHtMOf54bAXZ6l+sdqI=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":93},"end":{"line":3,"column":69,"index":162}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  Object.defineProperty(exports, \"PhoneIntegration\", {\n    enumerable: true,\n    get: function () {\n      return PhoneIntegration;\n    }\n  });\n  var _reactNativeWebDistExportsLinking = require(_dependencyMap[0], \"react-native-web/dist/exports/Linking\");\n  var Linking = _interopDefault(_reactNativeWebDistExportsLinking);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _expoContacts = require(_dependencyMap[2], \"expo-contacts\");\n  var Contacts = _interopNamespace(_expoContacts);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[3], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  class PhoneIntegration {\n    static CONTACTS_SYNC_KEY = 'medical_contacts_synced';\n\n    // Make phone call using native dialer\n    static async makePhoneCall(phoneNumber, patientName) {\n      try {\n        // Clean phone number (remove spaces, dashes, etc.)\n        const cleanNumber = phoneNumber.replace(/[^+\\d]/g, '');\n        if (!cleanNumber) {\n          throw new Error('Invalid phone number');\n        }\n        const phoneUrl = `tel:${cleanNumber}`;\n        const canOpen = await Linking.default.canOpenURL(phoneUrl);\n        if (canOpen) {\n          await Linking.default.openURL(phoneUrl);\n\n          // Log the call for medical records\n          await this.logPhoneCall(cleanNumber, patientName);\n          return true;\n        } else {\n          throw new Error('Cannot open phone dialer');\n        }\n      } catch (error) {\n        console.error('Phone call error:', error);\n        return false;\n      }\n    }\n\n    // Send SMS using native SMS app\n    static async sendSMS(phoneNumber, message) {\n      try {\n        const cleanNumber = phoneNumber.replace(/[^+\\d]/g, '');\n        let smsUrl = `sms:${cleanNumber}`;\n        if (message) {\n          const encodedMessage = encodeURIComponent(message);\n          smsUrl += Platform.default.OS === 'ios' ? `&body=${encodedMessage}` : `?body=${encodedMessage}`;\n        }\n        const canOpen = await Linking.default.canOpenURL(smsUrl);\n        if (canOpen) {\n          await Linking.default.openURL(smsUrl);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('SMS error:', error);\n        return false;\n      }\n    }\n\n    // Send email using native email app\n    static async sendEmail(email, subject, body) {\n      try {\n        let emailUrl = `mailto:${email}`;\n        const params = [];\n        if (subject) {\n          params.push(`subject=${encodeURIComponent(subject)}`);\n        }\n        if (body) {\n          params.push(`body=${encodeURIComponent(body)}`);\n        }\n        if (params.length > 0) {\n          emailUrl += `?${params.join('&')}`;\n        }\n        const canOpen = await Linking.default.canOpenURL(emailUrl);\n        if (canOpen) {\n          await Linking.default.openURL(emailUrl);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Email error:', error);\n        return false;\n      }\n    }\n\n    // Sync medical contacts to device contacts (for caller ID)\n    static async syncContactsToDevice(medicalContacts) {\n      try {\n        // Request contacts permission\n        const {\n          status\n        } = await Contacts.requestPermissionsAsync();\n        if (status !== 'granted') {\n          throw new Error('Contacts permission denied');\n        }\n\n        // Check if already synced recently\n        const lastSync = await AsyncStorage.default.getItem(this.CONTACTS_SYNC_KEY);\n        if (lastSync) {\n          const lastSyncTime = new Date(lastSync);\n          const now = new Date();\n          const hoursSinceSync = (now.getTime() - lastSyncTime.getTime()) / (1000 * 60 * 60);\n\n          // Don't sync more than once per day\n          if (hoursSinceSync < 24) {\n            console.log('Contacts recently synced, skipping...');\n            return true;\n          }\n        }\n        let syncedCount = 0;\n        for (const contact of medicalContacts) {\n          try {\n            // Check if contact already exists\n            const existingContacts = await Contacts.getContactsAsync({\n              fields: [Contacts.Fields.PhoneNumbers, Contacts.Fields.Name]\n            });\n            const existingContact = existingContacts.data.find(c => c.phoneNumbers?.some(p => p.number?.replace(/[^+\\d]/g, '') === contact.phone.replace(/[^+\\d]/g, '')));\n            if (!existingContact) {\n              // Create new contact with medical context\n              const contactData = {\n                name: `${contact.name} (${contact.patient_id})`,\n                firstName: contact.name.split(' ')[0],\n                lastName: contact.name.split(' ').slice(1).join(' ') || '',\n                phoneNumbers: [{\n                  number: contact.phone,\n                  isPrimary: true,\n                  label: 'Medical Contact'\n                }],\n                company: `Medical Patient - ${contact.group}`,\n                note: `Medical Contact - Patient ID: ${contact.patient_id}, Group: ${contact.group}`\n              };\n              if (contact.email) {\n                contactData.emails = [{\n                  email: contact.email,\n                  isPrimary: true,\n                  label: 'Medical'\n                }];\n              }\n              await Contacts.addContactAsync(contactData);\n              syncedCount++;\n            }\n          } catch (contactError) {\n            console.error(`Error syncing contact ${contact.name}:`, contactError);\n            // Continue with other contacts\n          }\n        }\n\n        // Update last sync time\n        await AsyncStorage.default.setItem(this.CONTACTS_SYNC_KEY, new Date().toISOString());\n        console.log(`Synced ${syncedCount} medical contacts to device`);\n        return true;\n      } catch (error) {\n        console.error('Contact sync error:', error);\n        return false;\n      }\n    }\n\n    // Remove medical contacts from device\n    static async removeContactsFromDevice() {\n      try {\n        const {\n          status\n        } = await Contacts.requestPermissionsAsync();\n        if (status !== 'granted') {\n          return false;\n        }\n        const contacts = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Note, Contacts.Fields.Name, Contacts.Fields.ID]\n        });\n        let removedCount = 0;\n        for (const contact of contacts.data) {\n          // Check if this is a medical contact based on note\n          if (contact.note && contact.note.includes('Medical Contact - Patient ID:')) {\n            try {\n              if (contact.id) {\n                await Contacts.removeContactAsync(contact.id);\n                removedCount++;\n              }\n            } catch (removeError) {\n              console.error(`Error removing contact ${contact.name}:`, removeError);\n            }\n          }\n        }\n\n        // Clear sync timestamp\n        await AsyncStorage.default.removeItem(this.CONTACTS_SYNC_KEY);\n        console.log(`Removed ${removedCount} medical contacts from device`);\n        return true;\n      } catch (error) {\n        console.error('Contact removal error:', error);\n        return false;\n      }\n    }\n\n    // Log phone call for medical records\n    static async logPhoneCall(phoneNumber, patientName) {\n      try {\n        const callLog = {\n          phone: phoneNumber,\n          patientName: patientName || 'Unknown',\n          timestamp: new Date().toISOString(),\n          type: 'outgoing'\n        };\n\n        // Get existing call logs\n        const existingLogs = await AsyncStorage.default.getItem('medical_call_logs');\n        const logs = existingLogs ? JSON.parse(existingLogs) : [];\n\n        // Add new log\n        logs.unshift(callLog);\n\n        // Keep only last 100 calls\n        if (logs.length > 100) {\n          logs.splice(100);\n        }\n\n        // Save updated logs\n        await AsyncStorage.default.setItem('medical_call_logs', JSON.stringify(logs));\n      } catch (error) {\n        console.error('Error logging phone call:', error);\n      }\n    }\n\n    // Get call logs for reports\n    static async getCallLogs() {\n      try {\n        const existingLogs = await AsyncStorage.default.getItem('medical_call_logs');\n        return existingLogs ? JSON.parse(existingLogs) : [];\n      } catch (error) {\n        console.error('Error getting call logs:', error);\n        return [];\n      }\n    }\n\n    // Check if device supports phone calls\n    static async canMakePhoneCalls() {\n      try {\n        return await Linking.default.canOpenURL('tel:');\n      } catch (error) {\n        return false;\n      }\n    }\n\n    // Check if device supports SMS\n    static async canSendSMS() {\n      try {\n        return await Linking.default.canOpenURL('sms:');\n      } catch (error) {\n        return false;\n      }\n    }\n\n    // Open contact in device contacts app\n    static async openContactInDevice(phoneNumber) {\n      try {\n        const {\n          status\n        } = await Contacts.requestPermissionsAsync();\n        if (status !== 'granted') {\n          return false;\n        }\n        const contacts = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.PhoneNumbers, Contacts.Fields.ID]\n        });\n        const contact = contacts.data.find(c => c.phoneNumbers?.some(p => p.number?.replace(/[^+\\d]/g, '') === phoneNumber.replace(/[^+\\d]/g, '')));\n        if (contact && contact.id) {\n          // Try to open contact in contacts app (this may not work on all devices)\n          const contactUrl = Platform.default.OS === 'ios' ? `contacts://contact/${contact.id}` : `content://contacts/people/${contact.id}`;\n          const canOpen = await Linking.default.canOpenURL(contactUrl);\n          if (canOpen) {\n            await Linking.default.openURL(contactUrl);\n            return true;\n          }\n        }\n        return false;\n      } catch (error) {\n        console.error('Error opening contact:', error);\n        return false;\n      }\n    }\n  }\n  var _default = PhoneIntegration;\n});","lineCount":319,"map":[[27,2,314,0,"Object"],[27,8,314,0],[27,9,314,0,"defineProperty"],[27,23,314,0],[27,24,314,0,"exports"],[27,31,314,0],[28,4,314,0,"enumerable"],[28,14,314,0],[29,4,314,0,"get"],[29,7,314,0],[29,18,314,0,"get"],[29,19,314,0],[30,6,314,0],[30,13,314,0,"_default"],[30,21,314,0],[31,4,314,0],[32,2,314,0],[33,2,14,0,"Object"],[33,8,14,0],[33,9,14,0,"defineProperty"],[33,23,14,0],[33,24,14,0,"exports"],[33,31,14,0],[34,4,14,0,"enumerable"],[34,14,14,0],[35,4,14,0,"get"],[35,7,14,0],[35,18,14,0,"get"],[35,19,14,0],[36,6,14,0],[36,13,14,0,"PhoneIntegration"],[36,29,14,0],[37,4,14,0],[38,2,14,0],[39,2,312,1],[39,6,312,1,"_reactNativeWebDistExportsLinking"],[39,39,312,1],[39,42,312,1,"require"],[39,49,312,1],[39,50,312,1,"_dependencyMap"],[39,64,312,1],[40,2,312,1],[40,6,312,1,"Linking"],[40,13,312,1],[40,16,312,1,"_interopDefault"],[40,31,312,1],[40,32,312,1,"_reactNativeWebDistExportsLinking"],[40,65,312,1],[41,2,312,1],[41,6,312,1,"_reactNativeWebDistExportsPlatform"],[41,40,312,1],[41,43,312,1,"require"],[41,50,312,1],[41,51,312,1,"_dependencyMap"],[41,65,312,1],[42,2,312,1],[42,6,312,1,"Platform"],[42,14,312,1],[42,17,312,1,"_interopDefault"],[42,32,312,1],[42,33,312,1,"_reactNativeWebDistExportsPlatform"],[42,67,312,1],[43,2,2,0],[43,6,2,0,"_expoContacts"],[43,19,2,0],[43,22,2,0,"require"],[43,29,2,0],[43,30,2,0,"_dependencyMap"],[43,44,2,0],[44,2,2,0],[44,6,2,0,"Contacts"],[44,14,2,0],[44,17,2,0,"_interopNamespace"],[44,34,2,0],[44,35,2,0,"_expoContacts"],[44,48,2,0],[45,2,3,0],[45,6,3,0,"_reactNativeAsyncStorageAsyncStorage"],[45,42,3,0],[45,45,3,0,"require"],[45,52,3,0],[45,53,3,0,"_dependencyMap"],[45,67,3,0],[46,2,3,0],[46,6,3,0,"AsyncStorage"],[46,18,3,0],[46,21,3,0,"_interopDefault"],[46,36,3,0],[46,37,3,0,"_reactNativeAsyncStorageAsyncStorage"],[46,73,3,0],[47,2,14,7],[47,8,14,13,"PhoneIntegration"],[47,24,14,29],[47,25,14,30],[48,4,15,2],[48,11,15,17,"CONTACTS_SYNC_KEY"],[48,28,15,34],[48,31,15,37],[48,56,15,62],[50,4,17,2],[51,4,18,2],[51,17,18,15,"makePhoneCall"],[51,30,18,28,"makePhoneCall"],[51,31,18,29,"phoneNumber"],[51,42,18,48],[51,44,18,50,"patientName"],[51,55,18,70],[51,57,18,90],[52,6,19,4],[52,10,19,8],[53,8,20,6],[54,8,21,6],[54,14,21,12,"cleanNumber"],[54,25,21,23],[54,28,21,26,"phoneNumber"],[54,39,21,37],[54,40,21,38,"replace"],[54,47,21,45],[54,48,21,46],[54,57,21,55],[54,59,21,57],[54,61,21,59],[54,62,21,60],[55,8,23,6],[55,12,23,10],[55,13,23,11,"cleanNumber"],[55,24,23,22],[55,26,23,24],[56,10,24,8],[56,16,24,14],[56,20,24,18,"Error"],[56,25,24,23],[56,26,24,24],[56,48,24,46],[56,49,24,47],[57,8,25,6],[58,8,27,6],[58,14,27,12,"phoneUrl"],[58,22,27,20],[58,25,27,23],[58,32,27,30,"cleanNumber"],[58,43,27,41],[58,45,27,43],[59,8,28,6],[59,14,28,12,"canOpen"],[59,21,28,19],[59,24,28,22],[59,30,28,28,"Linking"],[59,37,28,35],[59,38,28,35,"default"],[59,45,28,35],[59,46,28,36,"canOpenURL"],[59,56,28,46],[59,57,28,47,"phoneUrl"],[59,65,28,55],[59,66,28,56],[60,8,30,6],[60,12,30,10,"canOpen"],[60,19,30,17],[60,21,30,19],[61,10,31,8],[61,16,31,14,"Linking"],[61,23,31,21],[61,24,31,21,"default"],[61,31,31,21],[61,32,31,22,"openURL"],[61,39,31,29],[61,40,31,30,"phoneUrl"],[61,48,31,38],[61,49,31,39],[63,10,33,8],[64,10,34,8],[64,16,34,14],[64,20,34,18],[64,21,34,19,"logPhoneCall"],[64,33,34,31],[64,34,34,32,"cleanNumber"],[64,45,34,43],[64,47,34,45,"patientName"],[64,58,34,56],[64,59,34,57],[65,10,35,8],[65,17,35,15],[65,21,35,19],[66,8,36,6],[66,9,36,7],[66,15,36,13],[67,10,37,8],[67,16,37,14],[67,20,37,18,"Error"],[67,25,37,23],[67,26,37,24],[67,52,37,50],[67,53,37,51],[68,8,38,6],[69,6,39,4],[69,7,39,5],[69,8,39,6],[69,15,39,13,"error"],[69,20,39,18],[69,22,39,20],[70,8,40,6,"console"],[70,15,40,13],[70,16,40,14,"error"],[70,21,40,19],[70,22,40,20],[70,41,40,39],[70,43,40,41,"error"],[70,48,40,46],[70,49,40,47],[71,8,41,6],[71,15,41,13],[71,20,41,18],[72,6,42,4],[73,4,43,2],[75,4,45,2],[76,4,46,2],[76,17,46,15,"sendSMS"],[76,24,46,22,"sendSMS"],[76,25,46,23,"phoneNumber"],[76,36,46,42],[76,38,46,44,"message"],[76,45,46,60],[76,47,46,80],[77,6,47,4],[77,10,47,8],[78,8,48,6],[78,14,48,12,"cleanNumber"],[78,25,48,23],[78,28,48,26,"phoneNumber"],[78,39,48,37],[78,40,48,38,"replace"],[78,47,48,45],[78,48,48,46],[78,57,48,55],[78,59,48,57],[78,61,48,59],[78,62,48,60],[79,8,49,6],[79,12,49,10,"smsUrl"],[79,18,49,16],[79,21,49,19],[79,28,49,26,"cleanNumber"],[79,39,49,37],[79,41,49,39],[80,8,51,6],[80,12,51,10,"message"],[80,19,51,17],[80,21,51,19],[81,10,52,8],[81,16,52,14,"encodedMessage"],[81,30,52,28],[81,33,52,31,"encodeURIComponent"],[81,51,52,49],[81,52,52,50,"message"],[81,59,52,57],[81,60,52,58],[82,10,53,8,"smsUrl"],[82,16,53,14],[82,20,53,18,"Platform"],[82,28,53,26],[82,29,53,26,"default"],[82,36,53,26],[82,37,53,27,"OS"],[82,39,53,29],[82,44,53,34],[82,49,53,39],[82,52,53,42],[82,61,53,51,"encodedMessage"],[82,75,53,65],[82,77,53,67],[82,80,53,70],[82,89,53,79,"encodedMessage"],[82,103,53,93],[82,105,53,95],[83,8,54,6],[84,8,56,6],[84,14,56,12,"canOpen"],[84,21,56,19],[84,24,56,22],[84,30,56,28,"Linking"],[84,37,56,35],[84,38,56,35,"default"],[84,45,56,35],[84,46,56,36,"canOpenURL"],[84,56,56,46],[84,57,56,47,"smsUrl"],[84,63,56,53],[84,64,56,54],[85,8,57,6],[85,12,57,10,"canOpen"],[85,19,57,17],[85,21,57,19],[86,10,58,8],[86,16,58,14,"Linking"],[86,23,58,21],[86,24,58,21,"default"],[86,31,58,21],[86,32,58,22,"openURL"],[86,39,58,29],[86,40,58,30,"smsUrl"],[86,46,58,36],[86,47,58,37],[87,10,59,8],[87,17,59,15],[87,21,59,19],[88,8,60,6],[89,8,61,6],[89,15,61,13],[89,20,61,18],[90,6,62,4],[90,7,62,5],[90,8,62,6],[90,15,62,13,"error"],[90,20,62,18],[90,22,62,20],[91,8,63,6,"console"],[91,15,63,13],[91,16,63,14,"error"],[91,21,63,19],[91,22,63,20],[91,34,63,32],[91,36,63,34,"error"],[91,41,63,39],[91,42,63,40],[92,8,64,6],[92,15,64,13],[92,20,64,18],[93,6,65,4],[94,4,66,2],[96,4,68,2],[97,4,69,2],[97,17,69,15,"sendEmail"],[97,26,69,24,"sendEmail"],[97,27,69,25,"email"],[97,32,69,38],[97,34,69,40,"subject"],[97,41,69,56],[97,43,69,58,"body"],[97,47,69,71],[97,49,69,91],[98,6,70,4],[98,10,70,8],[99,8,71,6],[99,12,71,10,"emailUrl"],[99,20,71,18],[99,23,71,21],[99,33,71,31,"email"],[99,38,71,36],[99,40,71,38],[100,8,72,6],[100,14,72,12,"params"],[100,20,72,28],[100,23,72,31],[100,25,72,33],[101,8,74,6],[101,12,74,10,"subject"],[101,19,74,17],[101,21,74,19],[102,10,75,8,"params"],[102,16,75,14],[102,17,75,15,"push"],[102,21,75,19],[102,22,75,20],[102,33,75,31,"encodeURIComponent"],[102,51,75,49],[102,52,75,50,"subject"],[102,59,75,57],[102,60,75,58],[102,62,75,60],[102,63,75,61],[103,8,76,6],[104,8,78,6],[104,12,78,10,"body"],[104,16,78,14],[104,18,78,16],[105,10,79,8,"params"],[105,16,79,14],[105,17,79,15,"push"],[105,21,79,19],[105,22,79,20],[105,30,79,28,"encodeURIComponent"],[105,48,79,46],[105,49,79,47,"body"],[105,53,79,51],[105,54,79,52],[105,56,79,54],[105,57,79,55],[106,8,80,6],[107,8,82,6],[107,12,82,10,"params"],[107,18,82,16],[107,19,82,17,"length"],[107,25,82,23],[107,28,82,26],[107,29,82,27],[107,31,82,29],[108,10,83,8,"emailUrl"],[108,18,83,16],[108,22,83,20],[108,26,83,24,"params"],[108,32,83,30],[108,33,83,31,"join"],[108,37,83,35],[108,38,83,36],[108,41,83,39],[108,42,83,40],[108,44,83,42],[109,8,84,6],[110,8,86,6],[110,14,86,12,"canOpen"],[110,21,86,19],[110,24,86,22],[110,30,86,28,"Linking"],[110,37,86,35],[110,38,86,35,"default"],[110,45,86,35],[110,46,86,36,"canOpenURL"],[110,56,86,46],[110,57,86,47,"emailUrl"],[110,65,86,55],[110,66,86,56],[111,8,87,6],[111,12,87,10,"canOpen"],[111,19,87,17],[111,21,87,19],[112,10,88,8],[112,16,88,14,"Linking"],[112,23,88,21],[112,24,88,21,"default"],[112,31,88,21],[112,32,88,22,"openURL"],[112,39,88,29],[112,40,88,30,"emailUrl"],[112,48,88,38],[112,49,88,39],[113,10,89,8],[113,17,89,15],[113,21,89,19],[114,8,90,6],[115,8,91,6],[115,15,91,13],[115,20,91,18],[116,6,92,4],[116,7,92,5],[116,8,92,6],[116,15,92,13,"error"],[116,20,92,18],[116,22,92,20],[117,8,93,6,"console"],[117,15,93,13],[117,16,93,14,"error"],[117,21,93,19],[117,22,93,20],[117,36,93,34],[117,38,93,36,"error"],[117,43,93,41],[117,44,93,42],[118,8,94,6],[118,15,94,13],[118,20,94,18],[119,6,95,4],[120,4,96,2],[122,4,98,2],[123,4,99,2],[123,17,99,15,"syncContactsToDevice"],[123,37,99,35,"syncContactsToDevice"],[123,38,99,36,"medicalContacts"],[123,53,99,66],[123,55,99,86],[124,6,100,4],[124,10,100,8],[125,8,101,6],[126,8,102,6],[126,14,102,12],[127,10,102,14,"status"],[128,8,102,21],[128,9,102,22],[128,12,102,25],[128,18,102,31,"Contacts"],[128,26,102,39],[128,27,102,40,"requestPermissionsAsync"],[128,50,102,63],[128,51,102,64],[128,52,102,65],[129,8,104,6],[129,12,104,10,"status"],[129,18,104,16],[129,23,104,21],[129,32,104,30],[129,34,104,32],[130,10,105,8],[130,16,105,14],[130,20,105,18,"Error"],[130,25,105,23],[130,26,105,24],[130,54,105,52],[130,55,105,53],[131,8,106,6],[133,8,108,6],[134,8,109,6],[134,14,109,12,"lastSync"],[134,22,109,20],[134,25,109,23],[134,31,109,29,"AsyncStorage"],[134,43,109,41],[134,44,109,41,"default"],[134,51,109,41],[134,52,109,42,"getItem"],[134,59,109,49],[134,60,109,50],[134,64,109,54],[134,65,109,55,"CONTACTS_SYNC_KEY"],[134,82,109,72],[134,83,109,73],[135,8,110,6],[135,12,110,10,"lastSync"],[135,20,110,18],[135,22,110,20],[136,10,111,8],[136,16,111,14,"lastSyncTime"],[136,28,111,26],[136,31,111,29],[136,35,111,33,"Date"],[136,39,111,37],[136,40,111,38,"lastSync"],[136,48,111,46],[136,49,111,47],[137,10,112,8],[137,16,112,14,"now"],[137,19,112,17],[137,22,112,20],[137,26,112,24,"Date"],[137,30,112,28],[137,31,112,29],[137,32,112,30],[138,10,113,8],[138,16,113,14,"hoursSinceSync"],[138,30,113,28],[138,33,113,31],[138,34,113,32,"now"],[138,37,113,35],[138,38,113,36,"getTime"],[138,45,113,43],[138,46,113,44],[138,47,113,45],[138,50,113,48,"lastSyncTime"],[138,62,113,60],[138,63,113,61,"getTime"],[138,70,113,68],[138,71,113,69],[138,72,113,70],[138,77,113,75],[138,81,113,79],[138,84,113,82],[138,86,113,84],[138,89,113,87],[138,91,113,89],[138,92,113,90],[140,10,115,8],[141,10,116,8],[141,14,116,12,"hoursSinceSync"],[141,28,116,26],[141,31,116,29],[141,33,116,31],[141,35,116,33],[142,12,117,10,"console"],[142,19,117,17],[142,20,117,18,"log"],[142,23,117,21],[142,24,117,22],[142,63,117,61],[142,64,117,62],[143,12,118,10],[143,19,118,17],[143,23,118,21],[144,10,119,8],[145,8,120,6],[146,8,122,6],[146,12,122,10,"syncedCount"],[146,23,122,21],[146,26,122,24],[146,27,122,25],[147,8,124,6],[147,13,124,11],[147,19,124,17,"contact"],[147,26,124,24],[147,30,124,28,"medicalContacts"],[147,45,124,43],[147,47,124,45],[148,10,125,8],[148,14,125,12],[149,12,126,10],[150,12,127,10],[150,18,127,16,"existingContacts"],[150,34,127,32],[150,37,127,35],[150,43,127,41,"Contacts"],[150,51,127,49],[150,52,127,50,"getContactsAsync"],[150,68,127,66],[150,69,127,67],[151,14,128,12,"fields"],[151,20,128,18],[151,22,128,20],[151,23,128,21,"Contacts"],[151,31,128,29],[151,32,128,30,"Fields"],[151,38,128,36],[151,39,128,37,"PhoneNumbers"],[151,51,128,49],[151,53,128,51,"Contacts"],[151,61,128,59],[151,62,128,60,"Fields"],[151,68,128,66],[151,69,128,67,"Name"],[151,73,128,71],[152,12,129,10],[152,13,129,11],[152,14,129,12],[153,12,131,10],[153,18,131,16,"existingContact"],[153,33,131,31],[153,36,131,34,"existingContacts"],[153,52,131,50],[153,53,131,51,"data"],[153,57,131,55],[153,58,131,56,"find"],[153,62,131,60],[153,63,131,61,"c"],[153,64,131,62],[153,68,132,12,"c"],[153,69,132,13],[153,70,132,14,"phoneNumbers"],[153,82,132,26],[153,84,132,28,"some"],[153,88,132,32],[153,89,132,33,"p"],[153,90,132,34],[153,94,132,38,"p"],[153,95,132,39],[153,96,132,40,"number"],[153,102,132,46],[153,104,132,48,"replace"],[153,111,132,55],[153,112,132,56],[153,121,132,65],[153,123,132,67],[153,125,132,69],[153,126,132,70],[153,131,132,75,"contact"],[153,138,132,82],[153,139,132,83,"phone"],[153,144,132,88],[153,145,132,89,"replace"],[153,152,132,96],[153,153,132,97],[153,162,132,106],[153,164,132,108],[153,166,132,110],[153,167,132,111],[153,168,133,10],[153,169,133,11],[154,12,135,10],[154,16,135,14],[154,17,135,15,"existingContact"],[154,32,135,30],[154,34,135,32],[155,14,136,12],[156,14,137,12],[156,20,137,18,"contactData"],[156,31,137,47],[156,34,137,50],[157,16,138,14,"name"],[157,20,138,18],[157,22,138,20],[157,25,138,23,"contact"],[157,32,138,30],[157,33,138,31,"name"],[157,37,138,35],[157,42,138,40,"contact"],[157,49,138,47],[157,50,138,48,"patient_id"],[157,60,138,58],[157,63,138,61],[158,16,139,14,"firstName"],[158,25,139,23],[158,27,139,25,"contact"],[158,34,139,32],[158,35,139,33,"name"],[158,39,139,37],[158,40,139,38,"split"],[158,45,139,43],[158,46,139,44],[158,49,139,47],[158,50,139,48],[158,51,139,49],[158,52,139,50],[158,53,139,51],[159,16,140,14,"lastName"],[159,24,140,22],[159,26,140,24,"contact"],[159,33,140,31],[159,34,140,32,"name"],[159,38,140,36],[159,39,140,37,"split"],[159,44,140,42],[159,45,140,43],[159,48,140,46],[159,49,140,47],[159,50,140,48,"slice"],[159,55,140,53],[159,56,140,54],[159,57,140,55],[159,58,140,56],[159,59,140,57,"join"],[159,63,140,61],[159,64,140,62],[159,67,140,65],[159,68,140,66],[159,72,140,70],[159,74,140,72],[160,16,141,14,"phoneNumbers"],[160,28,141,26],[160,30,141,28],[160,31,141,29],[161,18,142,16,"number"],[161,24,142,22],[161,26,142,24,"contact"],[161,33,142,31],[161,34,142,32,"phone"],[161,39,142,37],[162,18,143,16,"isPrimary"],[162,27,143,25],[162,29,143,27],[162,33,143,31],[163,18,144,16,"label"],[163,23,144,21],[163,25,144,23],[164,16,145,14],[164,17,145,15],[164,18,145,16],[165,16,146,14,"company"],[165,23,146,21],[165,25,146,23],[165,46,146,44,"contact"],[165,53,146,51],[165,54,146,52,"group"],[165,59,146,57],[165,61,146,59],[166,16,147,14,"note"],[166,20,147,18],[166,22,147,20],[166,55,147,53,"contact"],[166,62,147,60],[166,63,147,61,"patient_id"],[166,73,147,71],[166,85,147,83,"contact"],[166,92,147,90],[166,93,147,91,"group"],[166,98,147,96],[167,14,148,12],[167,15,148,13],[168,14,150,12],[168,18,150,16,"contact"],[168,25,150,23],[168,26,150,24,"email"],[168,31,150,29],[168,33,150,31],[169,16,151,14,"contactData"],[169,27,151,25],[169,28,151,26,"emails"],[169,34,151,32],[169,37,151,35],[169,38,151,36],[170,18,152,16,"email"],[170,23,152,21],[170,25,152,23,"contact"],[170,32,152,30],[170,33,152,31,"email"],[170,38,152,36],[171,18,153,16,"isPrimary"],[171,27,153,25],[171,29,153,27],[171,33,153,31],[172,18,154,16,"label"],[172,23,154,21],[172,25,154,23],[173,16,155,14],[173,17,155,15],[173,18,155,16],[174,14,156,12],[175,14,158,12],[175,20,158,18,"Contacts"],[175,28,158,26],[175,29,158,27,"addContactAsync"],[175,44,158,42],[175,45,158,43,"contactData"],[175,56,158,54],[175,57,158,55],[176,14,159,12,"syncedCount"],[176,25,159,23],[176,27,159,25],[177,12,160,10],[178,10,161,8],[178,11,161,9],[178,12,161,10],[178,19,161,17,"contactError"],[178,31,161,29],[178,33,161,31],[179,12,162,10,"console"],[179,19,162,17],[179,20,162,18,"error"],[179,25,162,23],[179,26,162,24],[179,51,162,49,"contact"],[179,58,162,56],[179,59,162,57,"name"],[179,63,162,61],[179,66,162,64],[179,68,162,66,"contactError"],[179,80,162,78],[179,81,162,79],[180,12,163,10],[181,10,164,8],[182,8,165,6],[184,8,167,6],[185,8,168,6],[185,14,168,12,"AsyncStorage"],[185,26,168,24],[185,27,168,24,"default"],[185,34,168,24],[185,35,168,25,"setItem"],[185,42,168,32],[185,43,168,33],[185,47,168,37],[185,48,168,38,"CONTACTS_SYNC_KEY"],[185,65,168,55],[185,67,168,57],[185,71,168,61,"Date"],[185,75,168,65],[185,76,168,66],[185,77,168,67],[185,78,168,68,"toISOString"],[185,89,168,79],[185,90,168,80],[185,91,168,81],[185,92,168,82],[186,8,170,6,"console"],[186,15,170,13],[186,16,170,14,"log"],[186,19,170,17],[186,20,170,18],[186,30,170,28,"syncedCount"],[186,41,170,39],[186,70,170,68],[186,71,170,69],[187,8,171,6],[187,15,171,13],[187,19,171,17],[188,6,172,4],[188,7,172,5],[188,8,172,6],[188,15,172,13,"error"],[188,20,172,18],[188,22,172,20],[189,8,173,6,"console"],[189,15,173,13],[189,16,173,14,"error"],[189,21,173,19],[189,22,173,20],[189,43,173,41],[189,45,173,43,"error"],[189,50,173,48],[189,51,173,49],[190,8,174,6],[190,15,174,13],[190,20,174,18],[191,6,175,4],[192,4,176,2],[194,4,178,2],[195,4,179,2],[195,17,179,15,"removeContactsFromDevice"],[195,41,179,39,"removeContactsFromDevice"],[195,42,179,39],[195,44,179,60],[196,6,180,4],[196,10,180,8],[197,8,181,6],[197,14,181,12],[198,10,181,14,"status"],[199,8,181,21],[199,9,181,22],[199,12,181,25],[199,18,181,31,"Contacts"],[199,26,181,39],[199,27,181,40,"requestPermissionsAsync"],[199,50,181,63],[199,51,181,64],[199,52,181,65],[200,8,183,6],[200,12,183,10,"status"],[200,18,183,16],[200,23,183,21],[200,32,183,30],[200,34,183,32],[201,10,184,8],[201,17,184,15],[201,22,184,20],[202,8,185,6],[203,8,187,6],[203,14,187,12,"contacts"],[203,22,187,20],[203,25,187,23],[203,31,187,29,"Contacts"],[203,39,187,37],[203,40,187,38,"getContactsAsync"],[203,56,187,54],[203,57,187,55],[204,10,188,8,"fields"],[204,16,188,14],[204,18,188,16],[204,19,188,17,"Contacts"],[204,27,188,25],[204,28,188,26,"Fields"],[204,34,188,32],[204,35,188,33,"Note"],[204,39,188,37],[204,41,188,39,"Contacts"],[204,49,188,47],[204,50,188,48,"Fields"],[204,56,188,54],[204,57,188,55,"Name"],[204,61,188,59],[204,63,188,61,"Contacts"],[204,71,188,69],[204,72,188,70,"Fields"],[204,78,188,76],[204,79,188,77,"ID"],[204,81,188,79],[205,8,189,6],[205,9,189,7],[205,10,189,8],[206,8,191,6],[206,12,191,10,"removedCount"],[206,24,191,22],[206,27,191,25],[206,28,191,26],[207,8,193,6],[207,13,193,11],[207,19,193,17,"contact"],[207,26,193,24],[207,30,193,28,"contacts"],[207,38,193,36],[207,39,193,37,"data"],[207,43,193,41],[207,45,193,43],[208,10,194,8],[209,10,195,8],[209,14,195,12,"contact"],[209,21,195,19],[209,22,195,20,"note"],[209,26,195,24],[209,30,195,28,"contact"],[209,37,195,35],[209,38,195,36,"note"],[209,42,195,40],[209,43,195,41,"includes"],[209,51,195,49],[209,52,195,50],[209,83,195,81],[209,84,195,82],[209,86,195,84],[210,12,196,10],[210,16,196,14],[211,14,197,12],[211,18,197,16,"contact"],[211,25,197,23],[211,26,197,24,"id"],[211,28,197,26],[211,30,197,28],[212,16,198,14],[212,22,198,20,"Contacts"],[212,30,198,28],[212,31,198,29,"removeContactAsync"],[212,49,198,47],[212,50,198,48,"contact"],[212,57,198,55],[212,58,198,56,"id"],[212,60,198,58],[212,61,198,59],[213,16,199,14,"removedCount"],[213,28,199,26],[213,30,199,28],[214,14,200,12],[215,12,201,10],[215,13,201,11],[215,14,201,12],[215,21,201,19,"removeError"],[215,32,201,30],[215,34,201,32],[216,14,202,12,"console"],[216,21,202,19],[216,22,202,20,"error"],[216,27,202,25],[216,28,202,26],[216,54,202,52,"contact"],[216,61,202,59],[216,62,202,60,"name"],[216,66,202,64],[216,69,202,67],[216,71,202,69,"removeError"],[216,82,202,80],[216,83,202,81],[217,12,203,10],[218,10,204,8],[219,8,205,6],[221,8,207,6],[222,8,208,6],[222,14,208,12,"AsyncStorage"],[222,26,208,24],[222,27,208,24,"default"],[222,34,208,24],[222,35,208,25,"removeItem"],[222,45,208,35],[222,46,208,36],[222,50,208,40],[222,51,208,41,"CONTACTS_SYNC_KEY"],[222,68,208,58],[222,69,208,59],[223,8,210,6,"console"],[223,15,210,13],[223,16,210,14,"log"],[223,19,210,17],[223,20,210,18],[223,31,210,29,"removedCount"],[223,43,210,41],[223,74,210,72],[223,75,210,73],[224,8,211,6],[224,15,211,13],[224,19,211,17],[225,6,212,4],[225,7,212,5],[225,8,212,6],[225,15,212,13,"error"],[225,20,212,18],[225,22,212,20],[226,8,213,6,"console"],[226,15,213,13],[226,16,213,14,"error"],[226,21,213,19],[226,22,213,20],[226,46,213,44],[226,48,213,46,"error"],[226,53,213,51],[226,54,213,52],[227,8,214,6],[227,15,214,13],[227,20,214,18],[228,6,215,4],[229,4,216,2],[231,4,218,2],[232,4,219,2],[232,17,219,23,"logPhoneCall"],[232,29,219,35,"logPhoneCall"],[232,30,219,36,"phoneNumber"],[232,41,219,55],[232,43,219,57,"patientName"],[232,54,219,77],[232,56,219,94],[233,6,220,4],[233,10,220,8],[234,8,221,6],[234,14,221,12,"callLog"],[234,21,221,19],[234,24,221,22],[235,10,222,8,"phone"],[235,15,222,13],[235,17,222,15,"phoneNumber"],[235,28,222,26],[236,10,223,8,"patientName"],[236,21,223,19],[236,23,223,21,"patientName"],[236,34,223,32],[236,38,223,36],[236,47,223,45],[237,10,224,8,"timestamp"],[237,19,224,17],[237,21,224,19],[237,25,224,23,"Date"],[237,29,224,27],[237,30,224,28],[237,31,224,29],[237,32,224,30,"toISOString"],[237,43,224,41],[237,44,224,42],[237,45,224,43],[238,10,225,8,"type"],[238,14,225,12],[238,16,225,14],[239,8,226,6],[239,9,226,7],[241,8,228,6],[242,8,229,6],[242,14,229,12,"existingLogs"],[242,26,229,24],[242,29,229,27],[242,35,229,33,"AsyncStorage"],[242,47,229,45],[242,48,229,45,"default"],[242,55,229,45],[242,56,229,46,"getItem"],[242,63,229,53],[242,64,229,54],[242,83,229,73],[242,84,229,74],[243,8,230,6],[243,14,230,12,"logs"],[243,18,230,16],[243,21,230,19,"existingLogs"],[243,33,230,31],[243,36,230,34,"JSON"],[243,40,230,38],[243,41,230,39,"parse"],[243,46,230,44],[243,47,230,45,"existingLogs"],[243,59,230,57],[243,60,230,58],[243,63,230,61],[243,65,230,63],[245,8,232,6],[246,8,233,6,"logs"],[246,12,233,10],[246,13,233,11,"unshift"],[246,20,233,18],[246,21,233,19,"callLog"],[246,28,233,26],[246,29,233,27],[248,8,235,6],[249,8,236,6],[249,12,236,10,"logs"],[249,16,236,14],[249,17,236,15,"length"],[249,23,236,21],[249,26,236,24],[249,29,236,27],[249,31,236,29],[250,10,237,8,"logs"],[250,14,237,12],[250,15,237,13,"splice"],[250,21,237,19],[250,22,237,20],[250,25,237,23],[250,26,237,24],[251,8,238,6],[253,8,240,6],[254,8,241,6],[254,14,241,12,"AsyncStorage"],[254,26,241,24],[254,27,241,24,"default"],[254,34,241,24],[254,35,241,25,"setItem"],[254,42,241,32],[254,43,241,33],[254,62,241,52],[254,64,241,54,"JSON"],[254,68,241,58],[254,69,241,59,"stringify"],[254,78,241,68],[254,79,241,69,"logs"],[254,83,241,73],[254,84,241,74],[254,85,241,75],[255,6,242,4],[255,7,242,5],[255,8,242,6],[255,15,242,13,"error"],[255,20,242,18],[255,22,242,20],[256,8,243,6,"console"],[256,15,243,13],[256,16,243,14,"error"],[256,21,243,19],[256,22,243,20],[256,49,243,47],[256,51,243,49,"error"],[256,56,243,54],[256,57,243,55],[257,6,244,4],[258,4,245,2],[260,4,247,2],[261,4,248,2],[261,17,248,15,"getCallLogs"],[261,28,248,26,"getCallLogs"],[261,29,248,26],[261,31,248,45],[262,6,249,4],[262,10,249,8],[263,8,250,6],[263,14,250,12,"existingLogs"],[263,26,250,24],[263,29,250,27],[263,35,250,33,"AsyncStorage"],[263,47,250,45],[263,48,250,45,"default"],[263,55,250,45],[263,56,250,46,"getItem"],[263,63,250,53],[263,64,250,54],[263,83,250,73],[263,84,250,74],[264,8,251,6],[264,15,251,13,"existingLogs"],[264,27,251,25],[264,30,251,28,"JSON"],[264,34,251,32],[264,35,251,33,"parse"],[264,40,251,38],[264,41,251,39,"existingLogs"],[264,53,251,51],[264,54,251,52],[264,57,251,55],[264,59,251,57],[265,6,252,4],[265,7,252,5],[265,8,252,6],[265,15,252,13,"error"],[265,20,252,18],[265,22,252,20],[266,8,253,6,"console"],[266,15,253,13],[266,16,253,14,"error"],[266,21,253,19],[266,22,253,20],[266,48,253,46],[266,50,253,48,"error"],[266,55,253,53],[266,56,253,54],[267,8,254,6],[267,15,254,13],[267,17,254,15],[268,6,255,4],[269,4,256,2],[271,4,258,2],[272,4,259,2],[272,17,259,15,"canMakePhoneCalls"],[272,34,259,32,"canMakePhoneCalls"],[272,35,259,32],[272,37,259,53],[273,6,260,4],[273,10,260,8],[274,8,261,6],[274,15,261,13],[274,21,261,19,"Linking"],[274,28,261,26],[274,29,261,26,"default"],[274,36,261,26],[274,37,261,27,"canOpenURL"],[274,47,261,37],[274,48,261,38],[274,54,261,44],[274,55,261,45],[275,6,262,4],[275,7,262,5],[275,8,262,6],[275,15,262,13,"error"],[275,20,262,18],[275,22,262,20],[276,8,263,6],[276,15,263,13],[276,20,263,18],[277,6,264,4],[278,4,265,2],[280,4,267,2],[281,4,268,2],[281,17,268,15,"canSendSMS"],[281,27,268,25,"canSendSMS"],[281,28,268,25],[281,30,268,46],[282,6,269,4],[282,10,269,8],[283,8,270,6],[283,15,270,13],[283,21,270,19,"Linking"],[283,28,270,26],[283,29,270,26,"default"],[283,36,270,26],[283,37,270,27,"canOpenURL"],[283,47,270,37],[283,48,270,38],[283,54,270,44],[283,55,270,45],[284,6,271,4],[284,7,271,5],[284,8,271,6],[284,15,271,13,"error"],[284,20,271,18],[284,22,271,20],[285,8,272,6],[285,15,272,13],[285,20,272,18],[286,6,273,4],[287,4,274,2],[289,4,276,2],[290,4,277,2],[290,17,277,15,"openContactInDevice"],[290,36,277,34,"openContactInDevice"],[290,37,277,35,"phoneNumber"],[290,48,277,54],[290,50,277,74],[291,6,278,4],[291,10,278,8],[292,8,279,6],[292,14,279,12],[293,10,279,14,"status"],[294,8,279,21],[294,9,279,22],[294,12,279,25],[294,18,279,31,"Contacts"],[294,26,279,39],[294,27,279,40,"requestPermissionsAsync"],[294,50,279,63],[294,51,279,64],[294,52,279,65],[295,8,281,6],[295,12,281,10,"status"],[295,18,281,16],[295,23,281,21],[295,32,281,30],[295,34,281,32],[296,10,282,8],[296,17,282,15],[296,22,282,20],[297,8,283,6],[298,8,285,6],[298,14,285,12,"contacts"],[298,22,285,20],[298,25,285,23],[298,31,285,29,"Contacts"],[298,39,285,37],[298,40,285,38,"getContactsAsync"],[298,56,285,54],[298,57,285,55],[299,10,286,8,"fields"],[299,16,286,14],[299,18,286,16],[299,19,286,17,"Contacts"],[299,27,286,25],[299,28,286,26,"Fields"],[299,34,286,32],[299,35,286,33,"PhoneNumbers"],[299,47,286,45],[299,49,286,47,"Contacts"],[299,57,286,55],[299,58,286,56,"Fields"],[299,64,286,62],[299,65,286,63,"ID"],[299,67,286,65],[300,8,287,6],[300,9,287,7],[300,10,287,8],[301,8,289,6],[301,14,289,12,"contact"],[301,21,289,19],[301,24,289,22,"contacts"],[301,32,289,30],[301,33,289,31,"data"],[301,37,289,35],[301,38,289,36,"find"],[301,42,289,40],[301,43,289,41,"c"],[301,44,289,42],[301,48,290,8,"c"],[301,49,290,9],[301,50,290,10,"phoneNumbers"],[301,62,290,22],[301,64,290,24,"some"],[301,68,290,28],[301,69,290,29,"p"],[301,70,290,30],[301,74,290,34,"p"],[301,75,290,35],[301,76,290,36,"number"],[301,82,290,42],[301,84,290,44,"replace"],[301,91,290,51],[301,92,290,52],[301,101,290,61],[301,103,290,63],[301,105,290,65],[301,106,290,66],[301,111,290,71,"phoneNumber"],[301,122,290,82],[301,123,290,83,"replace"],[301,130,290,90],[301,131,290,91],[301,140,290,100],[301,142,290,102],[301,144,290,104],[301,145,290,105],[301,146,291,6],[301,147,291,7],[302,8,293,6],[302,12,293,10,"contact"],[302,19,293,17],[302,23,293,21,"contact"],[302,30,293,28],[302,31,293,29,"id"],[302,33,293,31],[302,35,293,33],[303,10,294,8],[304,10,295,8],[304,16,295,14,"contactUrl"],[304,26,295,24],[304,29,295,27,"Platform"],[304,37,295,35],[304,38,295,35,"default"],[304,45,295,35],[304,46,295,36,"OS"],[304,48,295,38],[304,53,295,43],[304,58,295,48],[304,61,296,12],[304,83,296,34,"contact"],[304,90,296,41],[304,91,296,42,"id"],[304,93,296,44],[304,95,296,46],[304,98,297,12],[304,127,297,41,"contact"],[304,134,297,48],[304,135,297,49,"id"],[304,137,297,51],[304,139,297,53],[305,10,299,8],[305,16,299,14,"canOpen"],[305,23,299,21],[305,26,299,24],[305,32,299,30,"Linking"],[305,39,299,37],[305,40,299,37,"default"],[305,47,299,37],[305,48,299,38,"canOpenURL"],[305,58,299,48],[305,59,299,49,"contactUrl"],[305,69,299,59],[305,70,299,60],[306,10,300,8],[306,14,300,12,"canOpen"],[306,21,300,19],[306,23,300,21],[307,12,301,10],[307,18,301,16,"Linking"],[307,25,301,23],[307,26,301,23,"default"],[307,33,301,23],[307,34,301,24,"openURL"],[307,41,301,31],[307,42,301,32,"contactUrl"],[307,52,301,42],[307,53,301,43],[308,12,302,10],[308,19,302,17],[308,23,302,21],[309,10,303,8],[310,8,304,6],[311,8,306,6],[311,15,306,13],[311,20,306,18],[312,6,307,4],[312,7,307,5],[312,8,307,6],[312,15,307,13,"error"],[312,20,307,18],[312,22,307,20],[313,8,308,6,"console"],[313,15,308,13],[313,16,308,14,"error"],[313,21,308,19],[313,22,308,20],[313,46,308,44],[313,48,308,46,"error"],[313,53,308,51],[313,54,308,52],[314,8,309,6],[314,15,309,13],[314,20,309,18],[315,6,310,4],[316,4,311,2],[317,2,312,0],[318,2,314,0],[318,6,314,0,"_default"],[318,14,314,0],[318,17,314,15,"PhoneIntegration"],[318,33,314,31],[319,0,314,32],[319,3]],"functionMap":{"names":["<global>","PhoneIntegration","PhoneIntegration.makePhoneCall","PhoneIntegration.sendSMS","PhoneIntegration.sendEmail","PhoneIntegration.syncContactsToDevice","existingContacts.data.find$argument_0","c.phoneNumbers.some$argument_0","PhoneIntegration.removeContactsFromDevice","PhoneIntegration.logPhoneCall","PhoneIntegration.getCallLogs","PhoneIntegration.canMakePhoneCalls","PhoneIntegration.canSendSMS","PhoneIntegration.openContactInDevice","contacts.data.find$argument_0"],"mappings":"AAA;OCa;ECI;GDyB;EEG;GFoB;EGG;GH2B;EIG;6DCgC;iCCC,8ED,CD;GJ4C;EOG;GPqC;EQG;GR0B;ESG;GTQ;EUG;GVM;EWG;GXM;EYG;yCCY;6BPC,4EO,CD;GZqB;CDC"},"hasCjsExports":false},"type":"js/module"}]}